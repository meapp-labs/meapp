name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      deploy_client:
        description: 'Deploy client'
        type: boolean
        required: false
        default: true
      deploy_server:
        description: 'Deploy server'
        type: boolean
        required: false
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read
  pull-requests: read

jobs:
  # ——— PR checks: client ———
  client:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: client/.nvmrc
          cache: yarn
          cache-dependency-path: client/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 100000

      - name: Audit dependencies
        run: yarn audit --level=high
        continue-on-error: true

      - name: Lint and format
        run: |
          yarn format
          yarn lint

      - name: Build and export
        run: yarn export:web
        env:
          EXPO_PUBLIC_API_URL: ${{ vars.EXPO_PUBLIC_API_URL }}
          CI: true

  # ——— PR checks: server ———
  server:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: server/.nvmrc

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('server/bun.lockb') }}
          restore-keys: ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Audit dependencies
        run: bun audit
        continue-on-error: true

      - name: Lint and format
        run: |
          bun format
          bun lint

      - name: Run tests
        run: bun test
        env:
          NODE_ENV: test

  # ——— Deploy: client ———
  deploy-client:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_client }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: client/.nvmrc
          cache: yarn
          cache-dependency-path: client/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 100000

      - name: Build and export
        run: yarn export:web
        env:
          EXPO_PUBLIC_API_URL: ${{ vars.EXPO_PUBLIC_API_URL }}
          CI: true

      - name: Deploy to server
        timeout-minutes: 10
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          set -euo pipefail
          eval $(ssh-agent)
          ssh-add - <<< "$SSH_PRIVATE_KEY"
          mkdir -p ~/.ssh
          ssh-keyscan -H "$REMOTE_HOST" >> ~/.ssh/known_hosts

          ssh $REMOTE_USER@$REMOTE_HOST bash -lc '
            set -euo pipefail
            if ! command -v rsync > /dev/null; then
              sudo apt-get update
              sudo apt-get install -y rsync
            fi
            mkdir -p ~/meapp/client/dist
          '
          rsync -azPic --delete --timeout=300 ./dist/ $REMOTE_USER@$REMOTE_HOST:~/meapp/client/dist/

  # ——— Deploy: server ———
  deploy-server:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_server }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: server/.nvmrc

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Prepare SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          set -euo pipefail
          eval $(ssh-agent)
          ssh-add - <<< "$SSH_PRIVATE_KEY"
          mkdir -p ~/.ssh
          ssh-keyscan -H "$REMOTE_HOST" >> ~/.ssh/known_hosts

          ssh $REMOTE_USER@$REMOTE_HOST bash -lc '
            set -euo pipefail
            export BUN_INSTALL="~/.bun"
            export PATH="$BUN_INSTALL/bin:$PATH"
            command -v rsync >/dev/null || (sudo apt-get update && sudo apt-get install -y rsync)
            command -v curl  >/dev/null || (sudo apt-get update && sudo apt-get install -y curl)
            command -v bun   >/dev/null || curl -fsSL https://bun.sh/install | bash
            command -v pm2   >/dev/null || bun install -g pm2
            mkdir -p ~/meapp/server
          '
          rsync -azPi --delete \
            --exclude node_modules \
            --exclude .git \
            --exclude .env \
            --exclude logs \
            --exclude .cache \
            ./ $REMOTE_USER@$REMOTE_HOST:~/meapp/server/
          
          ssh $REMOTE_USER@$REMOTE_HOST bash -lc '
            set -euo pipefail
            cd ~/meapp/server

            {
              echo "SESSION_SALT=${{ secrets.SESSION_SALT }}"
              echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}"
              echo "DOMAIN=${{ vars.DOMAIN }}"
              echo "HOST=${{ vars.HOST }}"
              echo "NODE_ENV=${{ vars.NODE_ENV }}"
            } > .env
            chmod 600 .env

            export PATH="~/.bun/bin:$PATH"
            bun install --production

            pm2 reload server --update-env 2>/dev/null || pm2 start bun --name server -- start
            sleep 3

            if pm2 show server | grep -q "online"; then
              echo "✅ Deployment successful!"
              pm2 save
            else
              echo "❌ Deployment failed, checking logs..."
              pm2 logs server --lines 20 --nostream
              exit 1
            fi
          '
